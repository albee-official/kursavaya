#define F_CPU 8000000UL				// ����������� �������� ������� (8 ���)
#define RS 2
#define E 6

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#include "LCD.h"

LCD::LCD() {
	Init();
}

LCD::~LCD() {}


void LCD::Init() {
	DDRC=0b11111111;	//Запись значения FF в порт C
	PORTC=0x00;			/* 
							Data Direction Register;
							настройка линий порта C;
							все линии порта C работают на вывод, PС4-PC7 - данные АЦЖКИ
						*/
	PORTA=0b00000000;
	DDRA=0b00000100;	/* 
							Data Direction Register;
							настройка линий порта A;
							линии порта A работают на ввод, PA2 - сигнал RS АЦЖКИ
						*/
	PORTD=0b00000000;
	DDRD=0b01100000;	/* 
							Data Direction Register;
							настройка линий порта D;
							старшие линии порта D работают на ввод, PD6 - сигнал E АЦЖКИ
						*/

	_delay_ms(50);		// Функция формирования задержки 50 мс
	
	PORTA&=~(1<<RS);	// Линию RS устанавливаем в 0 (передача команды)
	PORTC=0b00110000;	// Вывод в старшую тетраду PORTC команду выбора режима интерфейса
	PORTD&=~(1<<E);		// Сбрасываем E в ноль
	asm("nop");
	PORTD|=(1<<E);		// Устанавливаем E в единицу
	_delay_us(10);		// Функция формирования задержки 10 мкс
	PORTD&=~(1<<E);		// Сбрасываем E в ноль (сформирован импульс E длительностью 10 мкс)
	_delay_ms(1);		// Функция формирования задержки 1 мс
	
	PORTC=0b00110000;	// Вывод в старшую тетраду PORTC команду выбора режима интерфейса
	PORTD&=~(1<<E);		// Сбрасываем E в ноль
	asm("nop");
	PORTD|=(1<<E);		// Устанавливаем E в единицу
	_delay_us(10);		// Функция формирования задержки 10 мкс
	PORTD&=~(1<<E);		// Сбрасываем E в ноль (сформирован импульс E длительностью 10 мкс)
	_delay_ms(1);		// Функция формирования задержки 1 мс
	
	PORTC=0b00110000;	// Вывод в старшую тетраду PORTC команду выбора режима интерфейса
	PORTD&=~(1<<E);		// Сбрасываем E в ноль
	asm("nop");
	PORTD|=(1<<E);		// Устанавливаем E в единицу
	_delay_us(10);		// Функция формирования задержки 10 мкс
	PORTD&=~(1<<E);		// Сбрасываем E в ноль (сформирован импульс E длительностью 10 мкс)
	_delay_ms(1);		// Функция формирования задержки 1 мс
	
	_delay_ms(10);		// Функция формирования задержки 10 мс
	
	SendCommand(0x20);	/*
							Настройка дисплея (установка интерфейса (4хбитный),
							номера строки (первая строка) и типа шрифта (5 ? 8 точек) )
						*/

	SendCommand(0x28);	/*
							Настройка дисплея (установка интерфейса (4хбитный),
							номера строки (вторая строка) и типа шрифта (5 ? 8 точек) )
						*/
	
	SendCommand(0x08);	/* 
							Управление включениями дисплея (вывод на дисплей, отображение курсора и мигание курсора)
							Вывод на дисплей отключен, курсор не отображается, мигание курсора отключено 
						*/

	SendCommand(LCD::CLEAR_DISPLAY);	// Очистка дисплея
	SendCommand(0x06);	/* 
							Назначение направление перемещения курсора и включения сдвига всего дисплея
							сдвиг дисплея выключен, курсор перемещается вправо 
						*/

	SendCommand(0x0C);	/* 
							Управление включениями дисплея (вывод на дисплей, отображение курсора и мигание курсора)
							Вывод на дисплей включен, курсор не отображается, мигание курсора отключено 
						*/
}

void LCD::SendCommand (unsigned char lcd) {
	/* Функция осуществляет передачу команды (из списка команд данного ЖКИ: стр.15 "11.Instruction Table").
	В связи с особенностью подключения ЖКИ, передача происходит в два действия:
	передача старшей тетрады и передача младшей тетрады.*/
	
	unsigned char temp;		//Объявляется беззнаковая символьная переменная
	
	PORTA&=~(1<<RS);		// Линию RS устанавливаем в 0 (передача команды)
	PORTD|=(1<<E);			// Устанавливаем E в единицу
	temp=lcd;				//
	PORTC=temp;				// Передача полученной последовательности в порт C, к которому подключен ЖКИ
	
	asm("nop");				// Команда из ассемблера "nop" (No OPeration), создает задержку в один такт
	PORTD&=~(1<<E);			// Сбрасываем E в ноль
	asm("nop");

	PORTD|=(1<<E);			// Устанавливаем E в единицу
	temp=lcd*16;			/*
							   Содержимое переменной lcd подвергается сдвигу на 4 разряда влево (lcd*16)
							   В результате содержимое старшей тетрады замещается содержимым младшей
							*/
	PORTC=temp;				// Передача полученной последовательности в порт C, к которому подключен ЖКИ
	asm("nop");				// Команда из ассемблера "nop" (No OPeration), создает задержку в один такт
	PORTD&=~(1<<E);			// Сбрасываем E в ноль
	asm("nop");
	_delay_ms(2);			// Функция формирования задержки 2 мс
}

void LCD::SendData (unsigned char lcd) {
	/* Функция осуществляет передачу команды (из списка команд данного ЖКИ: стр.15 "11.Instruction Table").
	В связи с особенностью подключения ЖКИ, передача происходит в два действия:
	передача старшей тетрады и передача младшей тетрады.*/
	
	unsigned char temp;		//Объявляется беззнаковая символьная переменная
	
	PORTA|=(1<<RS);			// Линию RS устанавливаем в 1 (передача данных)
	PORTD|=(1<<E);			// Устанавливаем E в единицу
	temp=lcd;				/* В позицию, соответствующую выводу RS (задан в начале программы), устанавливается лог.единица
	Полученное выражение инвертируется (в позиции RS устанавливается лог. нуль, в остальных - лог. единицы)
	Далее совершается логическое умножение на содержимое lcd
	В результате все биты, кроме соответствующего RS, сохраняют свое значение
	Далее в бите, соответствующем выводу E (задан в начале программы),
	путем побитного сдвига и логического сложения,
	устанавливается лог. единица*/
	PORTC=temp;				//Передача полученной последовательности в порт C, к которому подключен ЖКИ
	
	asm("nop");				//Команда из ассемблера "nop" (No OPeration), создает задержку в один такт
	PORTD&=~(1<<E);			// Сбрасываем E в ноль
	asm("nop");
	////////////////////
	PORTD|=(1<<E);				// Устанавливаем E в единицу
	temp=lcd*16;				/*Содержимое переменной lcd подвергается сдвигу на 4 разряда влево (lcd*16)
	В результате содержимое старшей тетрады замещается содержимым младшей
	В позицию, соответствующую выводу RS (задан в начале программы), устанавливается лог.единица
	Полученное выражение инвертируется (в позиции RS устанавливается лог. нуль, в остальных - лог. единицы)
	Далее совершается логическое умножение на содержимое lcd
	В результате все биты, кроме соответствующего RS, сохраняют свое значение
	Далее в бите, соответствующем выводу E (задан в начале программы),
	путем побитного сдвига и логического сложения,
	устанавливается лог. единица*/
	
	PORTC=temp;				//Передача полученной последовательности в порт C, к которому подключен ЖКИ
	asm("nop");				//Команда из ассемблера "nop" (No OPeration), создает задержку в один такт
	PORTD&=~(1<<E);			// Сбрасываем E в ноль
	asm("nop");
	_delay_ms(2);			//Функция формирования задержки 2 мс
}

void LCD::WriteString(const char *str) {
	for (unsigned char k = 0; k < 255; k++) {
		if ( str[k]==0 )
		return;
		else SendData(str[k]);
	}
}

void LCD::WriteString(const char *str, int length) {
	if (length <= 0) return;
	for (unsigned char k = 0; k < length; k++) {
		if ( str[k]==0 ) continue;
		else SendData(str[k]);
	}
}